import { CreateItemDto } from './dto/create-item.dto';
import { UpdateItemDto } from './dto/update-item.dto';
import { Item } from '../entities/Items';
import { Repository } from 'typeorm';
import { SendItemDto } from './dto/send-item.dto';
import { LootTablesService } from '../loot-tables/loot-tables.service';
import { EquipDto } from './dto/equip.dto';
import { Bag } from '../entities/Bag';
import { Equipment } from '../entities/Equipment';
import { SellDto } from './dto/sell.dto';
import { Character } from '../entities/Character';
import { BuyDto } from './dto/buy.dto';
export declare class ItemsService {
    private itemRepository;
    private bagRepository;
    private equipmentRepository;
    private characterRepository;
    private readonly lootTablesService;
    constructor(itemRepository: Repository<Item>, bagRepository: Repository<Bag>, equipmentRepository: Repository<Equipment>, characterRepository: Repository<Character>, lootTablesService: LootTablesService);
    create(createItemDto: CreateItemDto): Promise<Item>;
    findAll(where?: any): Promise<SendItemDto[]>;
    findAllCascade(where?: any): Promise<SendItemDto[]>;
    findOne(id: number): Promise<SendItemDto>;
    update(updateItemDto: UpdateItemDto): Promise<Item>;
    remove(id: number): Promise<void>;
    generateItemFromLootTable(lootTableId: number, level?: number): Promise<Item>;
    equipItem(info: EquipDto): Promise<boolean>;
    putInBag(info: EquipDto): Promise<boolean>;
    sellItem(info: SellDto): Promise<boolean>;
    buyItem(info: BuyDto): Promise<boolean>;
    shopList(charactedId: number): Promise<Item[]>;
    testProbability(): Promise<any>;
}
